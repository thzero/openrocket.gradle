plugins {
    id "com.github.johnrengelman.shadow"
    id 'java'
}

group 'net.sf.openrocket'

Properties props = new Properties()
try {
    props.load(file('../core/src/main/resources/build.properties').newDataInputStream())
} catch (Exception ex) {
    throw new Exception("Missing build.properties. file: " + ex.getMessage())
}
version = props['build.version']

repositories {
    mavenCentral()
}

configurations {
    testArtifactsClasspath {
        canBeConsumed = false
        canBeResolved = true
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: '*.jar')

    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation group: 'org.commonmark', name: 'commonmark', version: '0.19.0' // 0.21.0
    implementation group: 'com.google.inject', name: 'guice', version: '4.2.2' // 4.2.3
    implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13' // 5.5.13.2
    implementation group: 'org.jfree', name: 'jcommon', version: '1.0.24'
    implementation group: 'org.jfree', name: 'jfreechart', version: '1.0.15' // 1.5.4
    implementation group: 'com.miglayout', name: 'miglayout-swing', version: '5.2' // 5.3, 11.0
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '2.6.1' // 3.3.2
    implementation group: 'com.yuvimasory', name: 'orange-extensions', version: '1.3.0'
    implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'

    implementation project(':core')

// TODO: Including output from coreotherwise NoClassDefFound issue with BaseTestCase
// The Cross Project Publications should work, but not seeming too.
    testImplementation project(':core').sourceSets.test.output
// https://docs.gradle.org/7.4/userguide/cross_project_publications.html
    testImplementation project (path: ':core', configuration: 'testArtifacts')
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.1' // 5.9.2
    testImplementation group: 'org.jmock', name: 'jmock', version: '2.9.0' // 2.12.0
    testImplementation group: 'org.jmock', name: 'jmock-junit4', version: '2.9.0' // 2.12.0
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    testImplementation 'junit:junit:4.12' // 4.3.1 org.junit.jupiter
//    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
//    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

tasks.register('externalComponentsCopy', Copy) {
    dependsOn 'externalComponentsValidate'
    // gradle always performs up-to-date check which causes copying be skipped.
    from('./resources-src/datafiles/components-openrocket') {
    }
    from('./resources-src/datafiles/components-dbcook/orc') {
    }
    into './src/main/resources/datafiles/components'
    exclude '**/*.bak'
    includeEmptyDirs = false
    eachFile { details ->
        println "Copying $details.sourcePath to $details.path ..."
    }
}
tasks.register('externalComponentsInit') {
    doLast {
        exec {
            workingDir "../"
            executable 'git'
            args 'submodule', 'init'
        }
        println "Executed externalComponentsInit!"
    }
}
tasks.register('externalComponentsValidate') {
        def externalResourceComponents = './resources-src/datafiles/components-dbcook/orc';
        def git = '../.git';
        if (!project.file(externalResourceComponents).exists()) {
            println "found: ${project.file(externalResourceComponents)}"
            def message = "The component database is now a submodule, and must be included into\n" +
                    "this project to compile and run the app.\n" +
                    "\n";
            if (project.file(git).exists()) {
                message +=
                        "If you retrieved this code by cloning the openrocket repository, \n" +
                        "the Gradle build will initialize the submodule if missing.\n" +
                        "\n" +
                        "You can also manually initialize and update the submodule from the \n" +
                        "command line\n" +
                        "% git submodule init\n" +
                        "% git submodule update --remote\n" +
                        "\n";
                println message
                dependsOn externalComponentsUpdate
            } else {
                message +=
                        "If you retrieved this code by downloading and uncompressing a zip file,\n" +
                                "Download the code\n" +
                                "from https://github.com/dbcook/openrocket-database and uncompress it.\n" +
                                "Copy the files and directories under openrocket-database-master\n" +
                                "into ''./swing/${externalResourceComponents}''\n" +
                                "\n";
                println message
                throw new GradleException('Invalid external component resources.')
            }
    }
}
tasks.register('externalComponentsUpdate') {
    dependsOn 'externalComponentsInit'
    doLast {
        exec {
            workingDir "../"
            executable 'git'
            args 'submodule', 'update', '--remote'
        }
        println "Executed externalComponentsUpdate!"
    }
}

compileJava.dependsOn([externalComponentsCopy])
